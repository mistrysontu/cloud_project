# -*- coding: utf-8 -*-
"""Untitled3.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/16p8LrYsr7weaeNIFO3UpjjZ7iHZOFqA1

## Import Data
"""

# from google.colab import files
# uploaded = files.upload()

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import random
from sklearn import preprocessing as pp
from sklearn.linear_model import LinearRegression
import pickle


def read_data():
    df = pd.read_csv('data/train/train.csv')
    col_list = [i for i in range(1, 10)]
    col_list.extend([79, 80])
    df = df.iloc[:, col_list]
    return df


def preprocess_data(df, nan_list, binary_data, categorical_data, label):
    ''' Scale and preprocess categorical data '''
    X = df.iloc[:, 0:-1]
    Y = df.iloc[:, [-1]]
    labelEncoder = pp.LabelEncoder()

    # Replace NaN with mean
    if nan_list:
        for col in nan_list:
            X[col].fillna(X[col].mean(), inplace=True)

    # Replace binary (categorical) data
    if binary_data:
        for col in binary_data:
            processed_data = labelEncoder.fit_transform(X[col])
            X = X.drop(columns=[col], axis=1)
            X[col] = processed_data

    # Replace categorical Data
    if categorical_data:
        for col in categorical_data:
            processed_data = pd.get_dummies(X[col])
            X = X.drop(columns=[col], axis=1)
            X = pd.concat([X, processed_data], axis=1)

    # Replace binary (categorical) data of Y with 0, 1
    if label:
        count = 0
        for col in label:
            processed_data = labelEncoder.fit_transform(Y[col])
            Y = Y.drop(columns=[col], axis=1)
            if count == 0:
                Y['label'] = processed_data
            else:
                Y['label' + str(count)] = processed_data
            count += 1
    df = pd.concat([X, Y], axis=1)
    return df


def features_scaling(df, df_type='test'):
    sc = pp.StandardScaler()
    if df_type == 'train':
        df.iloc[:, 0:3] = sc.fit_transform(df.iloc[:, 0:3])
    elif df_type == 'test':
        df.iloc[:, 0:3] = sc.transform(df.iloc[:, 0:3])
    return df


def prep(df):
    binary_data = []
    categorical_data = ['MSZoning', 'Street', 'Alley',
                        'LotShape', 'LandContour', 'Utilities', 'SaleCondition']
    label = []
    nan_list = ['LotFrontage']
    df = preprocess_data(df, nan_list, binary_data, categorical_data, label)
    df = features_scaling(df, 'train')
    return df


def main():
    # Read data
    df = read_data()
    # Preprocess Data
    df = prep(df)

    """# Train Model"""
    X = df.iloc[:, 0:-1]
    Y = df.iloc[:, [-1]]
    regressor = LinearRegression()

    # Fitting model with trainig data
    regressor.fit(X, Y)

    # Saving model to disk
    pickle.dump(regressor, open('model.pkl', 'wb'))

    # Loading model to compare the results
    model = pickle.load(open('model.pkl', 'rb'))

    # Test the model
    test = '0.309859	-0.456474	-0.096897	0	0	0	1	0	0	1	0	0	1	0	0	0	0	0	0	1	1	0	1	0	0	0	0	0'
    t = test.split('\t')
    op = list()
    for i in t:
        op.append(float(i))
    # print(op)
    model.predict([op])
